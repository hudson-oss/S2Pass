name: iOS Simulator Build (Appetize) v23

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    env:
      CONFIG: Release
      SDK: iphonesimulator
      DEST: generic/platform=iOS Simulator
      DERIVED: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Install tools
        run: |
          brew update
          brew install xcodegen

      - name: Update deployment target
        run: |
          set -euo pipefail
          if [ -f project.yml ]; then
            sed -i.bak 's/IPHONEOS_DEPLOYMENT_TARGET: 15.0/IPHONEOS_DEPLOYMENT_TARGET: 16.0/' project.yml
          fi

      - name: Ensure asset catalog
        run: |
          mkdir -p Sources/S2Pass/Assets.xcassets
          if [ ! -f Sources/S2Pass/Assets.xcassets/Contents.json ]; then
            echo '{ "info": { "version": 1, "author": "xcode" } }' > Sources/S2Pass/Assets.xcassets/Contents.json
          fi

      - name: Generate Xcode project
        run: |
          xcodegen generate
          xcodebuild -list -project S2Pass.xcodeproj

      - name: Build (signing off, bypass AppIcon requirement)
        run: |
          set -euo pipefail
          DERIVED_ABS="$GITHUB_WORKSPACE/$DERIVED"
          xcodebuild \
            -project S2Pass.xcodeproj \
            -scheme S2Pass \
            -sdk "$SDK" \
            -configuration "$CONFIG" \
            -destination "$DEST" \
            -derivedDataPath "$DERIVED_ABS" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="" \
            ASSETCATALOG_COMPILER_APPICON_NAME="" \
            CODE_SIGN_IDENTITY="" \
            ARCHS=x86_64 \
            EXCLUDED_ARCHS=arm64

      - name: Package .app for Appetize
        run: |
          set -euo pipefail
          DERIVED_ABS="$GITHUB_WORKSPACE/$DERIVED"
          PROD_DIR="$DERIVED_ABS/Build/Products/$CONFIG-$SDK"
          echo "Looking for products in $PROD_DIR"
          ls -R "$PROD_DIR" | head -n 20 || true
          if [ ! -d "$PROD_DIR" ]; then
            echo "No simulator products found in $PROD_DIR" >&2
            exit 1
          fi
          APP_PATH=$(find "$PROD_DIR" -maxdepth 2 -type d -name "*.app" ! -path "*/swiftmodule/*" | head -n1 || true)
          if [ -z "$APP_PATH" ]; then
            echo "No .app found in $PROD_DIR" >&2
            exit 1
          fi
          echo "Packaging $APP_PATH"
          ZIP_NAME="AppetizeBuild.app.zip"
          (cd "$(dirname "$APP_PATH")" && zip -r "$ZIP_NAME" "$(basename "$APP_PATH")")
          mv "$(dirname "$APP_PATH")/$ZIP_NAME" "$GITHUB_WORKSPACE/$ZIP_NAME"

      - name: Upload artifact (Appetize)
        uses: actions/upload-artifact@v4
        with:
          name: appetize-simulator-app
          path: AppetizeBuild.app.zip

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: ${{ github.workspace }}/xcodebuild.log
          if-no-files-found: warn
