name: iOS Simulator Build (Appetize) v10
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    env:
      CONFIG: Release
      SDK: iphonesimulator
      DEST: generic/platform=iOS Simulator
      DERIVED: ${{ github.workspace }}/build

    steps:
      - uses: actions/checkout@v4

      # Pick a valid preinstalled Xcode 16.x on the runner (avoids hard-coded paths)
      - name: Set up Xcode 16.x
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Show Xcode version
        run: |
          xcodebuild -version
          xcode-select -p

      # --- Optional: XcodeGen support (only if a project.yml exists) ---
      - name: Install XcodeGen (if project.yml is present)
        if: ${{ hashFiles('**/project.yml') != '' }}
        run: |
          brew update
          brew install xcodegen

      - name: Generate Xcode project with XcodeGen (if project.yml is present)
        if: ${{ hashFiles('**/project.yml') != '' }}
        run: |
          set -euo pipefail
          SPEC=$(git ls-files -- '**/project.yml' | head -n1)
          echo "Using spec: $SPEC"
          (cd "$(dirname "$SPEC")" && xcodegen)

      # --- Detect project/workspace + scheme automatically ---
      - id: detect
        name: Detect project/workspace and scheme
        run: |
          set -euo pipefail
          # Find a workspace or project anywhere in the repo
          XCPROJ=$(git ls-files -- '**/*.xcodeproj' | head -n1 || true)
          XCWORK=$(git ls-files -- '**/*.xcworkspace' | head -n1 || true)
          if [ -n "$XCWORK" ]; then
            FILE="$XCWORK"; KIND=workspace
            LIST=$(xcodebuild -list -workspace "$FILE" 2>/dev/null || true)
          elif [ -n "$XCPROJ" ]; then
            FILE="$XCPROJ"; KIND=project
            LIST=$(xcodebuild -list -project "$FILE" 2>/dev/null || true)
          else
            echo "❌ No .xcodeproj or .xcworkspace found in repo" >&2
            exit 1
          fi
          echo "$LIST"
          SCHEME=$(echo "$LIST" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | head -n1 | sed 's/^\s*//;s/\s*$//')
          if [ -z "${SCHEME:-}" ]; then
            echo "❌ Could not detect a shared scheme. Make sure your scheme is Shared in Xcode." >&2
            exit 1
          fi
          echo "file=$FILE"   >> $GITHUB_OUTPUT
          echo "kind=$KIND"   >> $GITHUB_OUTPUT
          echo "scheme=$SCHEME" >> $GITHUB_OUTPUT

      - name: Build (signing OFF)
        run: |
          set -euo pipefail
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            xcodebuild \
              -workspace "${{ steps.detect.outputs.file }}" \
              -scheme    "${{ steps.detect.outputs.scheme }}" \
              -sdk "$SDK" -configuration "$CONFIG" \
              -destination "$DEST" -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO \
              build | tee "$GITHUB_WORKSPACE/xcodebuild.log"
          else
            xcodebuild \
              -project   "${{ steps.detect.outputs.file }}" \
              -scheme    "${{ steps.detect.outputs.scheme }}" \
              -sdk "$SDK" -configuration "$CONFIG" \
              -destination "$DEST" -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO \
              build | tee "$GITHUB_WORKSPACE/xcodebuild.log"
          fi

      - name: Package .app for Appetize
        run: |
          set -euo pipefail
          PROD_DIR="$(/usr/bin/find "$DERIVED/Build/Products" -type d -maxdepth 1 -name "*-iphonesimulator" | head -n1 || true)"
          if [ -z "$PROD_DIR" ]; then
            echo "❌ No simulator products found in $DERIVED/Build/Products" >&2
            exit 1
          fi
          APP_PATH="$(/bin/ls -d "$PROD_DIR"/*.app 2>/dev/null | head -n1 || true)"
          if [ -z "$APP_PATH" ]; then
            echo "❌ No .app found in $PROD_DIR" >&2
            exit 1
          fi
          (cd "$PROD_DIR" && zip -r AppetizeBuild.app.zip "$(basename "$APP_PATH")")
          mv "$PROD_DIR/AppetizeBuild.app.zip" "$GITHUB_WORKSPACE/AppetizeBuild.app.zip"

      - name: Upload artifact (Appetize)
        uses: actions/upload-artifact@v4
        with:
          name: appetize-simulator-app
          path: AppetizeBuild.app.zip

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: ${{ github.workspace }}/xcodebuild.log
