name: iOS Simulator Build (Appetize)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15
    env:
      CONFIG: Release
      SDK: iphonesimulator
      DEST: generic/platform=iOS\ Simulator
      DERIVED: ${{ github.workspace }}/build
      SWIFT_VER: "5.10"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16 (best‑effort) & show version
        run: |
          set -e
          CANDIDATE=$(ls /Applications | grep -E '^Xcode_16.*\.app$' | head -n1 || true)
          if [ -n "$CANDIDATE" ]; then
            sudo xcode-select -s "/Applications/$CANDIDATE"
          fi
          xcodebuild -version

      - name: Install XcodeGen
        run: brew install xcodegen

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Show generated project & schemes
        run: |
          ls -la
          xcodebuild -list -project S2Pass.xcodeproj || true

      - name: Build S2Pass (iOS Simulator, signing OFF)
        continue-on-error: true
        run: |
          set -euo pipefail
          xcodebuild \
            -project S2Pass.xcodeproj \
            -scheme S2Pass \
            -sdk "$SDK" -configuration "$CONFIG" \
            -destination "$DEST" -derivedDataPath "$DERIVED" \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_VERSION=$SWIFT_VER \
            build | tee "$GITHUB_WORKSPACE/xcodebuild.log"

      - name: Show first compiler errors (if any)
        if: always()
        run: |
          echo "--- First error lines from xcodebuild.log ---"
          grep -nE "(error:|fatal error:)" "$GITHUB_WORKSPACE/xcodebuild.log" | head -n 60 || echo "(no explicit 'error:' lines found)"

      - name: Zip .app for Appetize (if build produced it)
        if: success()
        run: |
          set -euo pipefail
          echo "DerivedData root: $DERIVED"
          ls -la "$DERIVED/Build/Products" || true
          APP_DIR=$(find "$DERIVED/Build/Products" -maxdepth 1 -type d -name "*-iphonesimulator" | head -n1 || true)
          if [ -z "$APP_DIR" ]; then
            echo "❌ Could not locate *-iphonesimulator output folder." >&2
            exit 1
          fi
          echo "Using products dir: $APP_DIR"
          ls -la "$APP_DIR" || true
          APP_PATH=$(ls -d "$APP_DIR"/*.app 2>/dev/null | head -n1 || true)
          if [ -z "$APP_PATH" ] || [ ! -d "$APP_PATH" ]; then
            echo "❌ No .app found in $APP_DIR. See xcodebuild.log above." >&2
            exit 1
          fi
          cd "$APP_DIR"
          ZIP_NAME=AppetizeBuild.app.zip
          zip -r "$ZIP_NAME" "$(basename "$APP_PATH")"
          mv "$ZIP_NAME" "$GITHUB_WORKSPACE/"

      - name: Upload artifact (always include xcodebuild.log)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appetize-simulator-app
          path: |
            AppetizeBuild.app.zip
            xcodebuild.log

      - name: Fail the job if build step failed
        if: failure()
        run: exit 1
